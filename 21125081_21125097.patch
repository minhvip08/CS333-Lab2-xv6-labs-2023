diff --git a/Makefile b/Makefile
index 365c91b..0e12e1e 100644
--- a/Makefile
+++ b/Makefile
@@ -188,6 +188,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
+	$U/_sysinfotest\
 
 
 
diff --git a/answers-syscall.txt b/answers-syscall.txt
new file mode 100644
index 0000000..139600d
--- /dev/null
+++ b/answers-syscall.txt
@@ -0,0 +1,18 @@
+Looking at the backtrace output, which function called syscall?
+usertrap ()
+
+What is the value of p->trapframe->a7 and what does that value represent? (Hint: look user/initcode.S, the first user program xv6 starts.)
+p->trapframe->a7=7, 7: SYS_exec
+
+What was the previous mode that the CPU was in?
+User mode, SPP = 0
+
+Write down the assembly instruction the kernel is panicing at. Which register corresponds to the variable num?
+num = * (int *) 0;
+    8000205e:	00002903          	lw s2, 0(zero) # 0 <_entry-0x80000000>
+
+Why does the kernel crash?
+Loading page fault, 13
+
+What is the name of the binary that was running when the kernel paniced? What is its process id (pid)?
+pid = 1
\ No newline at end of file
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..bf96998 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,7 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+uint64         freemem(void);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -106,6 +107,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+uint64          nproc(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..a0a2c91 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -80,3 +80,15 @@ kalloc(void)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+// Determine the amount of free memory (in bytes).
+uint64
+freemem(void)
+{
+  struct run *r;
+  uint64 count = 0;
+  for(r = kmem.freelist; r; r = r->next) {
+    count++;
+  }
+  return count * PGSIZE;
+}
\ No newline at end of file
diff --git a/kernel/proc.c b/kernel/proc.c
index 58a8a0b..10d2531 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -169,6 +169,9 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+
+  p->syscall_trace = 0;
+
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -296,6 +299,8 @@ fork(void)
   }
   np->sz = p->sz;
 
+
+
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
 
@@ -310,6 +315,8 @@ fork(void)
 
   safestrcpy(np->name, p->name, sizeof(p->name));
 
+    np->syscall_trace = p->syscall_trace;
+
   pid = np->pid;
 
   release(&np->lock);
@@ -686,3 +693,17 @@ procdump(void)
     printf("\n");
   }
 }
+
+// Determine the number of processes in the system
+uint64
+nproc(void)
+{
+  struct proc *p;
+  uint64 count = 0;
+  for (p = proc; p < &proc[NPROC]; p++) {
+    if (p->state != UNUSED) {
+      count++;
+    }
+  }
+  return count;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..74cca99 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int syscall_trace;
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..98b8512 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_sysinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,8 +128,41 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_sysinfo] sys_sysinfo,
 };
 
+static char *syscall_names[] = {
+        "", "fork", "exit", "wait", "pipe", "read", "kill", "exec", "fstat", "chdir", "dup",
+        "getpid", "sbrk", "sleep", "uptime", "open", "write", "mknod", "unlink", "link", "mkdir",
+        "close", "trace"
+};
+
+
+// void
+// syscall(void)
+// {
+//   int num;
+//   struct proc *p = myproc();
+
+//   num = p->trapframe->a7;
+//   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
+//     // Use num to lookup the system call function for num, call it,
+//     // and store its return value in p->trapframe->a0
+//     p->trapframe->a0 = syscalls[num]();
+//           if (p->syscall_trace >> num) {
+//         	  printf("%d: syscall %s -> %d\n", 
+// 			  p->pid, syscall_names[num], p->trapframe->a0);
+//   }
+//   } else {
+//     printf("%d %s: unknown sys call %d\n",
+//             p->pid, p->name, num);
+//     p->trapframe->a0 = -1;
+//   }
+
+// }
+
+
 void
 syscall(void)
 {
@@ -139,9 +174,13 @@ syscall(void)
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
     p->trapframe->a0 = syscalls[num]();
+        if((p->syscall_trace >> num) ) {
+      printf("%d: syscall %s -> %d\n", p->pid, syscall_names[num], p->trapframe->a0);
+    }
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
     p->trapframe->a0 = -1;
   }
 }
+
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..e153363 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
+#define SYS_sysinfo 23
\ No newline at end of file
diff --git a/kernel/sysfile.c b/kernel/sysfile.c
index 16b668c..65f4e1e 100644
--- a/kernel/sysfile.c
+++ b/kernel/sysfile.c
@@ -16,6 +16,7 @@
 #include "file.h"
 #include "fcntl.h"
 
+
 // Fetch the nth word-sized system call argument as a file descriptor
 // and return both the descriptor and the corresponding struct file.
 static int
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3b4d5bd..3d210a4 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "sysinfo.h"
 
 uint64
 sys_exit(void)
@@ -91,3 +92,32 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_trace()
+{
+  int mask;
+
+  argint(0, &mask);
+
+  
+  // struct proc *pro = myproc();
+  myproc()->syscall_trace = mask;
+
+  return 0;
+} 
+
+uint64
+sys_sysinfo(void)
+{
+  struct proc *p = myproc();
+  struct sysinfo info;
+  info.freemem = freemem();
+  info.nproc = nproc();
+  uint64 addr = 0;
+  argaddr(0, &addr);
+  if (copyout(p->pagetable, addr, (char *)&info, sizeof(info)) < 0) {
+    return -1;
+  }
+  return 0;
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..ff8b2af 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+struct sysinfo;
+int sysinfo(struct sysinfo*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..bc109fd 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("sysinfo");
